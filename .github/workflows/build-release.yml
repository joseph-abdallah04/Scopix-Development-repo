name: Build Electron App for All Platforms

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: front_end/pnpm-lock.yaml

      - name: Install frontend dependencies
        working-directory: front_end
        run: pnpm install

      - name: Build frontend
        working-directory: front_end
        run: pnpm run build

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Install Python deps
        working-directory: back_end
        run: uv sync

      - name: Build backend executable
        working-directory: back_end
        run: |
         uv run pyinstaller --onedir --noconfirm --clean --name server --hidden-import=fastapi --hidden-import=starlette --hidden-import=pydantic --hidden-import=uvicorn ./main.py

      - name: Copy backend folder into frontend
        run: |
          mkdir -p front_end/dist-backend
          node -e "
            require('fs').cpSync(
              'back_end/dist/server',
              'front_end/dist-backend/server',
              { recursive: true }
            )
          "

      - name: Build Electron app
        working-directory: front_end
        run: |
          pnpm dist

      - name: List built files (debug)
        shell: bash
        run: |
          echo "=== Debug: Finding all built files ==="
          echo "Working directory contents:"
          ls -la .
          echo ""
          echo "Frontend directory contents:"
          if [ -d "front_end" ]; then
            ls -la front_end/
          else
            echo "front_end directory not found"
          fi
          echo ""
          echo "Looking for dist directories:"
          find . -name "dist" -type d 2>/dev/null || echo "No dist directories found"
          echo ""
          echo "Looking for release directories:" 
          find . -name "release" -type d 2>/dev/null || echo "No release directories found"
          echo ""
          echo "All .dmg files:"
          find . -name "*.dmg" -type f 2>/dev/null || echo "No .dmg files found"
          echo ""
          echo "All .exe files:"
          find . -name "*.exe" -type f 2>/dev/null || echo "No .exe files found"
          echo ""
          echo "All .AppImage files:"
          find . -name "*.AppImage" -type f 2>/dev/null || echo "No .AppImage files found"
          echo ""
          echo "All executable files in front_end (if exists):"
          if [ -d "front_end" ]; then
            find front_end/ -type f \( -name "*.dmg" -o -name "*.exe" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" \) 2>/dev/null || echo "No executables found in front_end"
          else
            echo "front_end directory doesn't exist"
          fi

      - name: Upload to Private Repo Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            **/*.dmg
            **/*.exe  
            **/*.AppImage
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts for next job
        uses: actions/upload-artifact@v4
        with:
          name: built-app-${{ matrix.os }}
          path: |
            **/*.dmg
            **/*.exe
            **/*.AppImage
          retention-days: 1
          if-no-files-found: warn

  publish-to-public:
    name: Publish to Public Repository
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: ./artifacts

      - name: List downloaded files (debug)
        run: |
          echo "Downloaded artifacts:"
          find ./artifacts -type f -name "*.dmg" -o -name "*.exe" -o -name "*.AppImage" | sort

      - name: Create Release in Public Repository
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PUBLIC_REPO_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');
            
            // Create the release first
            const { data: release } = await github.rest.repos.createRelease({
              owner: 'joseph-abdallah04',
              repo: 'Scopix',
              tag_name: '${{ github.ref_name }}',
              name: 'Release ${{ github.ref_name }}',
              body: `## Scopix Desktop Application - ${{ github.ref_name }}
            
            **For speech pathologists and medical professionals researching Inducible Laryngeal Obstruction (ILO)**
            
            ### Downloads Available:
            - **Windows**: \`.exe\` installer
            - **Linux**: \`.AppImage\` portable application
            - **macOS**: \`.dmg\` installer (if available)
            
            ### Before Installing:
            1. **Review the [End User License Agreement (EULA)](https://github.com/joseph-abdallah04/Scopix/blob/main/EULA.md)**
            2. **Read the [README](https://github.com/joseph-abdallah04/Scopix/blob/main/README.md)** for installation instructions
            3. **Check system requirements** in the README
            
            By downloading and using Scopix, you agree to the terms outlined in the EULA.
            
            ### Medical Disclaimer
            Scopix is intended as a tool for research and professional use by qualified medical practitioners. It is **not** a substitute for professional medical judgment, diagnosis, or treatment.`,
              draft: false,
              prerelease: false
            });
            
            console.log(`Created release: ${release.html_url}`);
            
            // Find and upload only the built application files
            const fileTypes = ['*.dmg', '*.exe', '*.AppImage'];
            
            for (const pattern of fileTypes) {
              try {
                const files = execSync(`find ./artifacts -name "${pattern}" -type f`, { encoding: 'utf8' })
                  .trim()
                  .split('\n')
                  .filter(f => f && f.length > 0);
                
                for (const filePath of files) {
                  if (fs.existsSync(filePath)) {
                    console.log(`Uploading ${filePath}...`);
                    const fileContent = fs.readFileSync(filePath);
                    const fileName = path.basename(filePath);
                    
                    await github.rest.repos.uploadReleaseAsset({
                      owner: 'joseph-abdallah04',
                      repo: 'Scopix',
                      release_id: release.id,
                      name: fileName,
                      data: fileContent
                    });
                    
                    console.log(`Successfully uploaded ${fileName}`);
                  }
                }
              } catch (error) {
                console.log(`No ${pattern} files found or error: ${error.message}`);
              }
            }