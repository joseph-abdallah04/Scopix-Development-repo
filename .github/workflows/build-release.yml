name: Build Electron App for All Platforms

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: front_end/pnpm-lock.yaml

      - name: Install frontend dependencies
        working-directory: front_end
        run: pnpm install

      - name: Build frontend
        working-directory: front_end
        run: pnpm run build

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Install Python deps
        working-directory: back_end
        run: uv sync

      - name: Build backend executable
        working-directory: back_end
        run: |
         uv run pyinstaller --onedir --noconfirm --clean --name server --hidden-import=fastapi --hidden-import=starlette --hidden-import=pydantic --hidden-import=uvicorn ./main.py

      - name: Copy backend folder into frontend
        run: |
          mkdir -p front_end/dist-backend
          node -e "
            require('fs').cpSync(
              'back_end/dist/server',
              'front_end/dist-backend/server',
              { recursive: true }
            )
          "

      - name: Build Electron app
        working-directory: front_end
        run: |
          pnpm dist

      - name: Upload to Private Repo Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            front_end/release/*.dmg
            front_end/release/*.exe
            front_end/release/*.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-to-public:
    name: Publish to Public Repository
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download release assets
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            
            // Get the release that was just created
            const releases = await github.rest.repos.listReleases({
              owner,
              repo,
              per_page: 1
            });
            
            if (releases.data.length === 0) {
              throw new Error('No releases found');
            }
            
            const release = releases.data[0];
            console.log(`Found release: ${release.tag_name}`);
            
            // Download all assets
            for (const asset of release.assets) {
              console.log(`Downloading ${asset.name}...`);
              const response = await github.rest.repos.getReleaseAsset({
                owner,
                repo,
                asset_id: asset.id,
                headers: {
                  Accept: 'application/octet-stream'
                }
              });
              
              fs.writeFileSync(asset.name, Buffer.from(response.data));
            }
            
            // Store release info for next step
            fs.writeFileSync('release-info.json', JSON.stringify({
              tag_name: release.tag_name,
              name: release.name,
              body: release.body,
              assets: release.assets.map(a => a.name)
            }));

      - name: Create Release in Public Repository
        uses: softprops/action-gh-release@v2
        with:
          repository: joseph-abdallah04/Scopix
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## Scopix Desktop Application - ${{ github.ref_name }}
            
            **For speech pathologists and medical professionals researching Inducible Laryngeal Obstruction (ILO)**
            
            ### Downloads Available:
            - **Windows**: `.exe` installer
            - **Linux**: `.AppImage` portable application
            - **macOS**: `.dmg` installer (if available)
            
            ### Before Installing:
            1. **Review the [End User License Agreement (EULA)](https://github.com/joseph-abdallah04/Scopix/blob/main/EULA.md)**
            2. **Read the [README](https://github.com/joseph-abdallah04/Scopix/blob/main/README.md)** for installation instructions
            3. **Check system requirements** in the README
            
            By downloading and using Scopix, you agree to the terms outlined in the EULA.
            
            ### Medical Disclaimer
            Scopix is intended as a tool for research and professional use by qualified medical practitioners. It is **not** a substitute for professional medical judgment, diagnosis, or treatment.
          files: |
            *.dmg
            *.exe
            *.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_TOKEN }}

      - name: Remove Source Code Assets
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PUBLIC_REPO_TOKEN }}
          script: |
            // Wait a bit for GitHub to process the release
            await new Promise(resolve => setTimeout(resolve, 5000));
            
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: 'joseph-abdallah04',
              repo: 'Scopix',
              tag: '${{ github.ref_name }}'
            });
            
            console.log(`Found release: ${release.name}`);
            console.log(`Assets found: ${release.assets.length}`);
            
            // Find and delete source code assets
            for (const asset of release.assets) {
              console.log(`Checking asset: ${asset.name}`);
              if (asset.name.toLowerCase().includes('source code') || 
                  (asset.name.endsWith('.zip') && asset.name !== 'Scopix.Setup.1.0.0.exe') ||
                  asset.name.endsWith('.tar.gz')) {
                console.log(`Deleting source code asset: ${asset.name}`);
                try {
                  await github.rest.repos.deleteReleaseAsset({
                    owner: 'joseph-abdallah04',
                    repo: 'Scopix',
                    asset_id: asset.id
                  });
                  console.log(`Successfully deleted: ${asset.name}`);
                } catch (error) {
                  console.error(`Failed to delete ${asset.name}:`, error.message);
                }
              }
            }